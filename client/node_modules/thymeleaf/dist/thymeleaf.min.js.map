{"version":3,"file":"thymeleaf.min.js","sources":["../source/standard/expressions/AllInput.js","../source/parser/Rule.js","../source/standard/expressions/ThymeleafRule.js","../source/parser/Grammar.js","../source/parser/Operators.js","../source/parser/InputBuffer.js","../node_modules/@ultraq/array-utils/array-utils.js","../source/standard/expressions/ThymeleafExpressionLanguage.js","../source/parser/RegularExpression.js","../source/parser/Parser.js","../source/standard/expressions/ExpressionProcessor.js","../source/processors/AttributeProcessor.js","../source/standard/processors/AttrAttributeProcessor.js","../node_modules/@ultraq/string-utils/string-utils.js","../source/processors/ElementProcessor.js","../source/standard/processors/BlockElementProcessor.js","../source/standard/processors/CheckedAttributeProcessor.js","../source/standard/processors/ClassAppendAttributeProcessor.js","../source/standard/processors/EachAttributeProcessor.js","../source/standard/processors/EmptyableAttributeProcessor.js","../source/standard/processors/FragmentAttributeProcessor.js","../node_modules/@ultraq/dom-utils/dom-utils.es.js","../source/standard/processors/IfAttributeProcessor.js","../source/standard/expressions/FragmentSignatureGrammar.js","../source/utilities/Dom.js","../node_modules/dumb-query-selector/dumb-query-selector.js","../source/utilities/Fragments.js","../source/standard/processors/InsertAttributeProcessor.js","../source/standard/processors/RemovableAttributeProcessor.js","../source/standard/processors/RemoveAttributeProcessor.js","../source/standard/processors/ReplaceAttributeProcessor.js","../source/standard/processors/TextAttributeProcessor.js","../source/standard/processors/UnlessAttributeProcessor.js","../source/standard/processors/UTextAttributeProcessor.js","../source/standard/processors/WithAttributeProcessor.js","../source/dialects/Dialect.js","../source/standard/StandardDialect.js","../source/Configurations.js","../source/processors/Matcher.js","../source/TemplateEngine.js"],"sourcesContent":["/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A special kind of expression that requires the referenced rule consume all\n * available input.\n * \n * @param {String} ruleName\n * @return {Matchable}\n */\nexport const AllInput = ruleName => (input, parser) => {\n\tlet matchResult = parser.parseWithExpression(input, ruleName);\n\treturn matchResult !== null && input.exhausted() ? matchResult : null;\n};\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default processor which returns the result as is.\n * \n * @template T\n * @param {T} result\n * @return {T}\n */\nconst defaultMatchProcessor = result => result;\n\n/**\n * A rule describes a string in the language.\n * \n * @author Emanuel Rabina\n */\nexport default class Rule {\n\n\t/**\n\t * @param {String} name\n\t * @param {Object} expression\n\t * @param {Function} [matchProcessor=defaultMatchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor = defaultMatchProcessor) {\n\n\t\tthis.name           = name;\n\t\tthis.expression     = expression;\n\t\tthis.matchProcessor = matchProcessor;\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this rule.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rule.\n\t */\n\taccept(input, parser) {\n\n\t\tlet {expression, name} = this;\n\t\treturn parser.trackExpression(input, expression, name, () => {\n\t\t\tlet matchResult = parser.parseWithExpression(input, expression);\n\t\t\treturn matchResult !== null ? this.matchProcessor(matchResult) : null;\n\t\t});\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Rule from '../../parser/Rule';\n\n/**\n * A custom rule where the default match processor returns a function to execute\n * against the current context to discover the matched value.\n */\nexport default class ThymeleafRule extends Rule {\n\n\t/**\n\t * @param {String} name\n\t * @param {Object} expression\n\t * @param {Function} [matchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor) {\n\n\t\tconst contextSensitiveMatchProcessor = result => (...args) => {\n\t\t\t// console.log(`Processing rule: ${name}`);\n\t\t\treturn typeof result === 'function' ? result.apply(null, args) : result;\n\t\t};\n\t\tsuper(name, expression, matchProcessor || contextSensitiveMatchProcessor);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of Rules that describes a language.\n * \n * @author Emanuel Rabina\n */\nexport default class Grammar {\n\n\t/**\n\t * @param {String} name\n\t * @param {Rule} startingRule\n\t * @param {...Rule} additionalRules\n\t */\n\tconstructor(name, startingRule, ...additionalRules) {\n\n\t\tthis.name = name;\n\t\tthis.rules = [].concat(startingRule, additionalRules);\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this grammar.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rules of this grammar.\n\t */\n\taccept(input, parser) {\n\n\t\treturn this.startingRule.accept(input, parser);\n\t}\n\n\t/**\n\t * Return the rule that has the given name.\n\t * \n\t * @param {String} name\n\t * @return {Rule}\n\t */\n\tfindRuleByName(name) {\n\n\t\tlet rule = this.rules.find(rule => rule.name === name);\n\t\tif (!rule) {\n\t\t\tthrow new Error(`Failed to find a rule named \"${name}\" in the grammar`);\n\t\t}\n\t\treturn rule;\n\t}\n\n\t/**\n\t * Returns the grammar's starting rule.\n\t * \n\t * @return {Rule}\n\t */\n\tget startingRule() {\n\n\t\treturn this.rules[0];\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an expression function where the underlying expression doesn't need\n * to be matched.  Thus, optional expressions \"always\" match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const Optional = expression => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = parser.parseWithExpression(input, expression);\n\t\treturn result !== null ? result : '';\n\t});\n};\n\n/**\n * Returns an expression function where the expression must be matched against\n * at least once to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const OneOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results.length > 0 ? results : null;\n\t});\n};\n\n/**\n * Returns an expression function where only one of the underlying expressions\n * must be matched in order to consider the expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const OrderedChoice = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result !== null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t});\n};\n\n/**\n * Returns an expression whose underlying expressions must be matched in order\n * to consider the entire expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const Sequence = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresults.push(result);\n\t\t}\n\t\treturn results;\n\t});\n};\n\n/**\n * Returns an expression function where the expression can be matched a repeated\n * number of times or none at all to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const ZeroOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t});\n};\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wrapper around the string being parsed, with a position that keeps track of\n * what part of the imput is currently being read/tested.\n * \n * @author Emanuel Rabina\n */\nexport default class InputBuffer {\n\n\t/**\n\t * @private\n\t * @type {Number}\n\t */\n\tposition = 0;\n\n\t/**\n\t * @private\n\t * @type {Array<Number>}\n\t */\n\tpositionStack = [];\n\n\t/**\n\t * @param {String} input\n\t */\n\tconstructor(input) {\n\n\t\tthis.input = input;\n\t}\n\n\t/**\n\t * Clear the previously {@link #mark}ed position.\n\t */\n\tclear() {\n\n\t\tlet lastPosition = this.positionStack.pop();\n\t\tif (lastPosition === undefined) {\n\t\t\tthrow new Error('Called clear() but no matching mark()');\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether or not the current position is at the end of the input,\n\t * meaning we've exhausted the entire input string.\n\t * \n\t * @return {Boolean}\n\t */\n\texhausted() {\n\n\t\treturn this.position === this.input.length;\n\t}\n\n\t/**\n\t * Sets a mark at the current position so that it can be returned to by a\n\t * matching {@link #reset} call.\n\t */\n\tmark() {\n\n\t\tthis.positionStack.push(this.position);\n\t}\n\n\t/**\n\t * Convenience method for surrounding a function with a call to {@link #mark},\n\t * then {@link #clear} if the result of the function is non-null, or\n\t * {@link #reset} if `null`.\n\t * \n\t * @template T\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\tmarkAndClearOrReset(func) {\n\n\t\tthis.mark();\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\tthis.clear();\n\t\t\treturn result;\n\t\t}\n\t\tthis.reset();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Reads as many characters from the current position as satisfies the given\n\t * pattern, returning the read characters and advancing the mark by as many\n\t * characters.\n\t * \n\t * @param {RegExp} pattern\n\t * @return {Array} The array of matched strings, or `null` if the pattern\n\t *   didn't match.\n\t */\n\tread(pattern) {\n\n\t\tlet remaining = this.input.substring(this.position);\n\t\tlet leadingWhitespace = remaining.match(/^\\s+/);\n\t\tif (leadingWhitespace) {\n\t\t\tleadingWhitespace = leadingWhitespace[0];\n\t\t\tremaining = remaining.substring(leadingWhitespace.length);\n\t\t}\n\t\tlet result = new RegExp(pattern.source).exec(remaining);\n\t\tif (result) {\n\t\t\tlet [value] = result;\n\t\t\tif (remaining.startsWith(value)) {\n\t\t\t\tthis.position += (value.length + (leadingWhitespace ? leadingWhitespace.length : 0));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Revert to the last @{link #mark}ed position.\n\t */\n\treset() {\n\n\t\tlet newPosition = this.positionStack.pop();\n\t\tif (newPosition === undefined) {\n\t\t\tthrow new Error('Called reset() but no matching mark()');\n\t\t}\n\t\tthis.position = newPosition;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Flattens an arrays of arrays into a single array.\n * \n * @param {Array} array\n * @return {Array} Flattened array.\n */\nexport function flatten(array) {\n\n\treturn array.reduce((accumulator, value) => {\n\t\treturn accumulator.concat(Array.isArray(value) ? flatten(value) : value);\n\t}, []);\n}\n\n/**\n * Creates an array of numbers from the starting value (inclusive) to the end\n * (exclusive), with an optional step (the gap between values).\n * \n * @param {Number} start\n *   The value to start at, the first item in the returned array.\n * @param {Number} end\n *   The value to end with, the last item in the returned array.\n * @param {Number} [step=1]\n *   The increment/gap between values, defaults to 1.\n * @return {Array} An array encompassing the given range.\n */\nexport function range(start, end, step = 1) {\n\n\treturn Array.apply(0, Array(Math.ceil((end - start) / step))).map((empty, index) => index * step + start);\n}\n\n/**\n * Remove and return the first item from `array` that matches the predicate\n * function.\n * \n * @param {Array} array\n * @param {Function} predicate\n *   Invoked with the array item.\n * @return {Object} The matching item, or `null` if no match was found.\n */\nexport function remove(array, predicate) {\n\n\treturn array.find((item, index) => {\n\t\tif (predicate(item)) {\n\t\t\tarray.splice(index, 1);\n\t\t\treturn item;\n\t\t}\n\t});\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}          from './AllInput.js';\nimport ExpressionProcessor from './ExpressionProcessor.js';\nimport ThymeleafRule       from './ThymeleafRule.js';\nimport Grammar             from '../../parser/Grammar.js';\nimport {\n\tOptional,\n\tOneOrMore,\n\tOrderedChoice,\n\tSequence,\n\tZeroOrMore\n} from '../../parser/Operators.js';\nimport {RegularExpression} from '../../parser/RegularExpression.js';\n\nimport {flatten, remove} from '@ultraq/array-utils';\n\n// For helping identify rules that return objects\nconst METADATA_FRAGMENT  = 'fragment';\nconst METADATA_ITERATION = 'iteration';\n\n/**\n * Grammar for the Thymeleaf expression language.  Describes the language and\n * how to parse it.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf Expression Language',\n\n\t// Ordered as at https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax\n\tnew ThymeleafRule('ThymeleafExpression',\n\t\tOrderedChoice(\n\t\t\tAllInput('VariableExpression'),\n\t\t\tAllInput('LinkExpression'),\n\t\t\tAllInput('FragmentExpression'),\n\t\t\tAllInput('Iteration'),\n\t\t\tAllInput('StringConcatenation'),\n\t\t\tAllInput('ScopedVariables'),\n\t\t\tAllInput('Literal'),\n\t\t\tAllInput('LogicalExpression'),\n\t\t\tAllInput('IfThenCondition'),\n\t\t\tAllInput('IfThenElseCondition'),\n\t\t\tAllInput('TokenLiteral'),\n\t\t\tAllInput('Nothing')\n\t\t)\n\t),\n\n\n\t// Simple expressions\n\t// ==================\n\n\t/**\n\t * Variable expressions, `${variable}`.  Represents a value to be retrieved\n\t * from the current context.  Also is an entry into the underlying expression\n\t * language, so this part often extends to do what OGNL (and thus SpEL) can\n\t * do.\n\t */\n\tnew ThymeleafRule('VariableExpression',\n\t\tSequence(/\\${/, 'Chain', /\\}/),\n\t\t([, chain]) => context => {\n\t\t\tlet result = chain(context);\n\t\t\treturn result !== null && result !== undefined ? result : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('Chain',\n\t\tSequence(Optional('Negation'), 'ChainLink', ZeroOrMore(Sequence(/\\./, 'ChainLink'))),\n\t\t([negation, ...chain]) => context => {\n\t\t\tlet result = flatten(chain).filter(link => link !== '.').reduce((linkContext, nextLink) => {\n\t\t\t\tif (linkContext === null || linkContext === undefined) {\n\t\t\t\t\treturn linkContext;\n\t\t\t\t}\n\t\t\t\treturn nextLink(linkContext, context);\n\t\t\t}, context);\n\t\t\treturn typeof negation === 'function' ? !result : result;\n\t\t}\n\t),\n\tnew ThymeleafRule('ChainLink',\n\t\tOrderedChoice('MethodCall', 'PropertyName', 'Literal')\n\t),\n\tnew ThymeleafRule('Negation', /!/),\n\n\t/**\n\t * Link expressions, `@{url(parameters)}`.  Used for generating URLs out of\n\t * context parameters.\n\t * \n\t * TODO: Change this to use the other expression types as it causes a circular\n\t *       dependency in the build.\n\t */\n\tnew ThymeleafRule('LinkExpression',\n\t\tRegularExpression(/^@\\{(.+?)(\\(.+\\))?\\}$/, ['Url', 'UrlParameters']),\n\t\t([, urlFunc, parameters]) => context => {\n\n\t\t\tlet url = urlFunc(context);\n\t\t\tif (parameters) {\n\n\t\t\t\t// TODO: Push this parsing of the parameters list back into the grammar\n\t\t\t\tlet expressionProcessor = new ExpressionProcessor();\n\t\t\t\tlet paramsList = parameters(context).slice(1, -1).split(',').map(param => {\n\t\t\t\t\tlet [lhs, rhs] = param.split('=');\n\t\t\t\t\treturn [lhs, expressionProcessor.process(rhs, context)];\n\t\t\t\t});\n\n\t\t\t\t// Fill out any placeholders in the URL from the parameters\n\t\t\t\twhile (true) { // eslint-disable-line\n\t\t\t\t\tlet urlTemplate = /(.*?)\\{(.+?)\\}(.*)/.exec(url);\n\t\t\t\t\tif (urlTemplate) {\n\t\t\t\t\t\tlet [, head, placeholder, tail] = urlTemplate;\n\t\t\t\t\t\tlet paramEntry = remove(paramsList, ([lhs]) => lhs === placeholder);\n\t\t\t\t\t\tif (paramEntry) {\n\t\t\t\t\t\t\turl = `${head}${paramEntry[1]}${tail}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remaining parameters become search query parameters\n\t\t\t\tif (paramsList.length) {\n\t\t\t\t\turl += `?${paramsList.map(([key, value]) => `${key}=${value}`).join('&')}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t),\n\tnew ThymeleafRule('Url', /.+/),\n\tnew ThymeleafRule('UrlParameters', /\\((.+)\\)/),\n\n\t/**\n\t * Fragment expressions, `~{template :: fragment(parameters)}`.  A locator for\n\t * a piece of HTML in the same or another template.\n\t */\n\tnew ThymeleafRule('FragmentExpression',\n\t\tSequence(/~{/, 'TemplateName', /::/, 'FragmentName', Optional('FragmentParametersSection'), /}/),\n\t\t([, templateName, , fragmentName, parameters]) => context => {\n\n\t\t\t// TODO: Should executing a fragment expression locate and return the\n\t\t\t//       fragment?  If so, then it'll make expression execution\n\t\t\t//       asynchronous!\n\t\t\treturn {\n\t\t\t\ttype: METADATA_FRAGMENT,\n\t\t\t\ttemplateName: templateName(context),\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameters: parameters ? parameters(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('TemplateName', /[\\w-._/]+/),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParametersSection',\n\t\tSequence(/\\(/, Optional('FragmentParameters'), /\\)/),\n\t\t([, parameters]) => context => {\n\t\t\treturn parameters(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence('Expression', ZeroOrMore(Sequence(/,/, 'Expression'))),\n\t\t(expressionsAndSeparators) => context => {\n\t\t\treturn expressionsAndSeparators ?\n\t\t\t\tflatten(expressionsAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(expressions => expressions(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Complex expressions\n\t// ===================\n\n\t/**\n\t * Iteration, `localVar : ${collection}`.  The name of the variable for each\n\t * loop, followed by the collection being iterated over.\n\t */\n\tnew ThymeleafRule('Iteration',\n\t\tSequence('Identifier', Optional(Sequence(/,/, 'Identifier')), /:/, 'VariableExpression'),\n\t\t([localValueName, [, iterationStatusVariable], , collectionExpressionAction]) => context => ({\n\t\t\ttype: METADATA_ITERATION,\n\t\t\tlocalValueName: localValueName(context),\n\t\t\titerable: collectionExpressionAction(context),\n\t\t\titerationStatusVariable: iterationStatusVariable ? iterationStatusVariable(context) : null\n\t\t})\n\t),\n\n\t/**\n\t * String concatenation, `'...' + '...'` or even `${...} + ${...}`, the\n\t * joining of 2 expressions by way of the `+` operator.\n\t */\n\tnew ThymeleafRule('StringConcatenation',\n\t\tSequence('Concatenatable', OneOrMore(Sequence(/\\+/, 'Concatenatable'))),\n\t\t(values) => context => {\n\t\t\treturn flatten(values).filter(item => item !== '+').reduce((result, value) => {\n\t\t\t\treturn result + (typeof value === 'function' ? value(context) : value);\n\t\t\t}, '');\n\t\t}\n\t),\n\tnew ThymeleafRule('Concatenatable',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'VariableExpression'\n\t\t)\n\t),\n\n\t/**\n\t * Scoped variable aliases, `key=${expression},...`, describes one or more\n\t * names for scoped variables with the expressions that can be their values.\n\t */\n\tnew ThymeleafRule('ScopedVariables',\n\t\tSequence('ScopedVariable', ZeroOrMore(Sequence(/,/, 'ScopedVariable'))),\n\t\t(aliases) => context => {\n\t\t\treturn flatten(aliases).map(alias => alias(context));\n\t\t}\n\t),\n\tnew ThymeleafRule('ScopedVariable',\n\t\tSequence('Identifier', /=/, 'Expression'),\n\t\t([name, , expression]) => context => ({\n\t\t\tname: name(context),\n\t\t\tvalue: expression(context)\n\t\t})\n\t),\n\n\t// Literals\n\t// ========\n\n\tnew ThymeleafRule('Literal',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'NumberLiteral',\n\t\t\t'BooleanLiteral',\n\t\t\t'NullLiteral'\n\t\t)\n\t),\n\n\t/**\n\t * String literal, characters surrounded by `'` (single quotes).\n\t * \n\t * This is trying to emulate negative lookbehind so that escaped quotes don't\n\t * get counted as string terminators, but JavaScript only got that feature in\n\t * ES2018, so if I used it it'd leave too many JS engines without support.\n\t */\n\tnew ThymeleafRule('StringLiteral', /'.*?(?!\\\\').'/, result => () => result.slice(1, -1).replace(/\\\\/g, '')),\n\n\t/**\n\t * A number.\n\t */\n\tnew ThymeleafRule('NumberLiteral', /\\d+(\\.\\d+)?/, result => () => parseFloat(result)),\n\n\t/**\n\t * One of `true` or `false`.\n\t */\n\tnew ThymeleafRule('BooleanLiteral', /(true|false)/, result => () => result === 'true'),\n\n\t/**\n\t * The word `null` to represent the null value.\n\t */\n\t// TODO: The parser uses null to mean 'failed parse', so this might not work?\n\tnew ThymeleafRule('NullLiteral', /null/, () => () => null),\n\n\t/**\n\t * A token literal, which is pretty much anything else that can't be categorized\n\t * by the other literal types.  This is often used as a fallback in the\n\t * expression language so that, for any unknown input, we're still returning\n\t * something.\n\t */\n\tnew ThymeleafRule('TokenLiteral', /[^: ${}]+/, result => () => result),\n\n\n\t// Text operations\n\t// ===============\n\n\n\t// Arithmetic operations\n\t// =====================\n\n\n\t// Boolean operations\n\t// ==================\n\n\n\t// Comparisons and equality\n\t// ========================\n\n\t/**\n\t * A logical expression is any expression that resolves to a `true`/`false`\n\t * value.\n\t */\n\tnew ThymeleafRule('LogicalExpression',\n\t\tSequence('Expression', 'Comparator', 'Expression'),\n\t\t([leftOperand, comparator, rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\tswitch (comparator(context)) {\n\t\t\t\tcase '==':  return lhs == rhs; // eslint-disable-line\n\t\t\t\tcase '===': return lhs === rhs;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t),\n\tnew ThymeleafRule('Comparator',\n\t\tOrderedChoice(\n\t\t\t/===?/\n\t\t)\n\t),\n\n\n\t// Conditional operators\n\t// =====================\n\n\t/**\n\t * If-then condition, `if ? then`.  This is the truthy branch only of the\n\t * classic ternary operator.  The falsey branch is a no-op.\n\t */\n\tnew ThymeleafRule('IfThenCondition',\n\t\tSequence('Condition', /\\?/, 'Expression'),\n\t\t([condition, , truthyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : undefined;\n\t\t}\n\t),\n\n\t/**\n\t * If-then-else condition, `if ? then : else`, the classic ternary operator.\n\t */\n\tnew ThymeleafRule('IfThenElseCondition',\n\t\tSequence('Condition', /\\?/, 'Expression', /:/, 'Expression'),\n\t\t([condition, , truthyExpression, , falseyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : falseyExpression(context);\n\t\t}\n\t),\n\n\t/**\n\t * A condition is some expression or value that resolves to a true/false\n\t * value.\n\t */\n\tnew ThymeleafRule('Condition',\n\t\tOrderedChoice(\n\t\t\t'LogicalExpression',\n\t\t\t'Expression'\n\t\t)\n\t),\n\n\n\t// Special tokens\n\t// ==============\n\n\t/**\n\t * An expression that matches the empty string.\n\t */\n\tnew ThymeleafRule('Nothing', /^$/),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/),\n\tnew ThymeleafRule('PropertyName', 'Identifier',\n\t\t(propertyName) => context => {\n\t\t\tlet property = propertyName(context);\n\t\t\treturn context.hasOwnProperty(property) ? context[property] : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodCall',\n\t\tSequence('MethodName', /\\(/, Optional('MethodParameters'), /\\)/),\n\t\t([name, , parameters]) => (context, parameterContext) => {\n\t\t\tlet methodName = name(context);\n\t\t\tlet method = context[methodName];\n\t\t\tif (!method) {\n\t\t\t\tconsole.warn(`No method '${methodName}' present on the current context.  Expression: ${context.expression}`);\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn method.apply(null, parameters(parameterContext || context));\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodName', 'Identifier'),\n\tnew ThymeleafRule('MethodParameters',\n\t\tSequence('Chain', ZeroOrMore(Sequence(/,/, 'Chain'))),\n\t\t(parametersAndSeparators) => context => {\n\t\t\treturn parametersAndSeparators ?\n\t\t\t\tflatten(parametersAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(parameter => parameter(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\t/**\n\t * Any valid unit of code that resolves to some value.\n\t */\n\tnew ThymeleafRule('Expression',\n\t\tOrderedChoice(\n\t\t\t'VariableExpression',\n\t\t\t'StringConcatenation',\n\t\t\t'Literal'\n\t\t)\n\t)\n);\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * A special kind of expression that understands matched portions of regular\n * expressions to run processing over, which may lead to additional parsing\n * expressions.\n * \n * This expression should be used sparingly as the regexes within need to take\n * care of whitespace between tokens themselves, which can be annoying.\n * \n * @param {RegExp} expression\n * @param {Array<Matchable>} matchers\n * @return {Matchable}\n */\nexport const RegularExpression = (expression, matchers) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = input.read(expression);\n\t\tif (result) {\n\t\t\tlet parseResults = [result[0]];\n\t\t\tfor (let i = 1; i < result.length; i++) {\n\t\t\t\tlet match = result[i];\n\t\t\t\tif (match !== undefined) {\n\t\t\t\t\tlet parseResult = parser.parseWithExpression(new InputBuffer(match), matchers[i - 1]);\n\t\t\t\t\tif (parseResult === null) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tparseResults.push(parseResult);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parseResults;\n\t\t}\n\t\treturn null;\n\t});\n};\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * Any one of the objects that can be matched:\n *  - an expression function\n *  - a string that references another rule\n *  - a regular expression\n * \n * @typedef {String|RegExp|Function} Matchable\n */\n\n/**\n * A recursive descent parser for any parsing expression grammar defined by the\n * constructs in this module.\n * \n * TODO: Own module?\n * \n * @author Emanuel Rabina\n */\nexport default class Parser {\n\n\texpressionStack = [];\n\n\t/**\n\t * @param {Grammar} grammar\n\t */\n\tconstructor(grammar) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse a string, attempting to build the parse tree defined by the rules in\n\t * the configured grammar.  Parsing is considered successful when there are no\n\t * more non-terminating symbols in the grammar and all of the input has been\n\t * read.\n\t * \n\t * @param {String} input\n\t * @return {Object} The parse tree if the input could be parsed, `null`\n\t *   otherwise.\n\t */\n\tparse(input) {\n\n\t\tlet inputBuffer = new InputBuffer(input);\n\t\tlet matchResult = this.grammar.accept(inputBuffer, this);\n\t\tif (matchResult === null || !inputBuffer.exhausted()) {\n\t\t\tlet errorMessage = `Failed to parse \"${input}\"`;\n\n\t\t\t// Don't bring down the thread if we can't parse\n\t\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\t\tconsole.error(errorMessage);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t}\n\t\t}\n\t\treturn matchResult;\n\t}\n\n\t/**\n\t * Parse the input against the given expression.  An expression can either be\n\t * a reference to another rule in the current grammar, or a regular expression\n\t * that consumes input.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @return {Object}\n\t */\n\tparseWithExpression(input, expression) {\n\n\t\t// Name of another rule in the grammar\n\t\tif (typeof expression === 'string') {\n\t\t\tlet rule = this.grammar.findRuleByName(expression);\n\t\t\treturn rule ? rule.accept(input, this) : null;\n\t\t}\n\n\t\t// A regular expression that must be matched\n\t\telse if (expression instanceof RegExp) {\n\t\t\tlet result = input.read(expression);\n\t\t\tif (result) {\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t}\n\n\t\t// An expression function to be executed\n\t\telse if (typeof expression === 'function') {\n\t\t\treturn expression(input, this);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Surrounds a function that evaluates an expression with tracking it against\n\t * the current stack.  Useful for knowing how the current expression was\n\t * arrived at through the grammar's rules.\n\t * \n\t * @template T\n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @param {String} name\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\ttrackExpression(input, expression, name, func) {\n\n\t\tlet stackSize = this.expressionStack.push({\n\t\t\tname,\n\t\t\texpression: typeof expression !== 'function' ? expression.toString() : null,\n\t\t\tinput: input.input.substring(input.position)\n\t\t});\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\treturn result;\n\t\t}\n\t\tthis.expressionStack.splice(stackSize - 1);\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ThymeleafExpressionLanguage from './ThymeleafExpressionLanguage.js';\nimport Parser                      from '../../parser/Parser.js';\n\n/**\n * Parses and executes Thymeleaf expressions.\n * \n * TODO: Create a shared instance of this for a processing context so that it\n *       doesn't need to be recreated over and over.\n * \n * @author Emanuel Rabina\n */\nexport default class ExpressionProcessor {\n\n\t/**\n\t * Constructor, create a new processor that can parse/execute a string in the\n\t * given grammar.\n\t * \n\t * @param {Grammar} [grammar=ThymeleafExpressionLanguage]\n\t */\n\tconstructor(grammar = ThymeleafExpressionLanguage) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse and execute the given input as a Thymeleaf expression.\n\t * \n\t * @param {String} input\n\t * @param {Object} [context={}]\n\t * @return {*}\n\t */\n\tprocess(input, context = {}) {\n\n\t\t// TODO: Probably don't need to create a new parser every time?\n\t\tlet parser = new Parser(this.grammar);\n\t\tlet expression = parser.parse(input);\n\t\treturn expression ? expression({\n\t\t\t...context,\n\t\t\texpression: input\n\t\t}) : null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for attribute processors.\n * \n * @author Emanuel Rabina\n */\nexport default class AttributeProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {escapeHtml} from '@ultraq/string-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:attr` attribute processor, modifies or sets\n * a target attribute to whatever its associated expression evaluates to.\n * \n * @author Emanuel Rabina\n */\nexport default class AttrAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'attr';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, AttrAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:attr` or `data-th-attr` attribute\n\t * on it, picking out the target attributes and setting them to whatever their\n\t * expressions evaluate to.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\t// TODO: This regex, is this some kind of value list that needs to be\n\t\t//       turned into an expression?\n\t\tif (/(.+=.+,)*.+=.+/.test(attributeValue)) {\n\t\t\tattributeValue.split(',').forEach(attribute => {\n\t\t\t\tlet attributeParts = attribute.split('=');\n\t\t\t\telement.setAttribute(attributeParts[0], escapeHtml(new ExpressionProcessor().process(attributeParts[1], context)));\n\t\t\t});\n\t\t}\n\t\t/* istanbul ignore next */\n\t\telse if (process.env.NODE_ENV !== 'test') {\n\t\t\tconsole.warn(`Value to ${attribute}, ${attributeValue}, doesn't seem to contain an attribute assignment expression.  Ignoring.`);\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes special HTML characters in a string with their entity code\n * equivalents.\n * \n * @param {String} string\n * @return {String}\n *   HTML escaped string, safe for use in HTML.\n */\nexport function escapeHtml(string) {\n\n\treturn typeof string !== 'string' ? string : string\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&#039;');\n}\n\n/**\n * Returns the replacement of each placeholder in a template string with a\n * corresponding replacement value.\n * \n * @param {String} template\n * @param {...String} values\n *   Argument list of values or a single array of values.\n * @return {String}\n *   Replaced template string.\n */\nexport function format(template, ...values) {\n\n\treturn template.replace(/\\{(\\d+)\\}/g, (match, index) => values[+index] + '');\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parent class for element processors.\n * \n * @author Emanuel Rabina\n */\nexport default class ElementProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ElementProcessor from '../../processors/ElementProcessor.js';\n\n/**\n * Equivalent of Thymeleaf's \"synthetic tag\", `th:block`, which removes itself,\n * leaving the body of the tag behind.\n * \n * @author Emanuel Rabina\n */\nexport default class BlockElementProcessor extends ElementProcessor {\n\n\tstatic NAME = 'block';\n\n\t/**\n\t * Constructor, set this processor to use the `block` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, BlockElementProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element named `th:block`, removing itself to leave its\n\t * body/contents behind.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {Object} context\n\t * @return {Boolean} `true` to indicate that the elements need reprocessing.\n\t */\n\tprocess(element, context) {\n\n\t\tlet parent = element.parentElement;\n\t\twhile (element.firstChild) {\n\t\t\tlet child = element.firstChild;\n\t\t\tparent.insertBefore(child, element);\n\n\t\t\tif (child instanceof Element && element.__thymeleafLocalVariables) {\n\t\t\t\tchild.__thymeleafLocalVariables = {\n\t\t\t\t\t...(child.__thymeleafLocalVariables || {}),\n\t\t\t\t\t...element.__thymeleafLocalVariables\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tparent.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Thymeleaf's `th:checked` attribute processor, sets or removes the `checked`\n * attribute from an element based on the result of the expression within it.\n * \n * TODO: This is one of HTML5s \"boolean attributes\", attributes whose values are\n *       true simply by being present in the element, regardless of the value\n *       inside it.  To act as false, the attribute has to be removed.  Find a\n *       way to generate these from some list of boolean attributes so that I\n *       don't need to write a class for each one!\n * \n * @author Emanuel Rabina\n */\nexport default class CheckedAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'checked';\n\n\t/**\n\t * Constructor, set this processor to use the `checked` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, CheckedAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:checked` or `data-th-checked`\n\t * attribute on it, either setting or removing a `checked` attribute to the\n\t * current element based on the result of the inner expression.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet result = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (result) {\n\t\t\telement.setAttribute('checked', '');\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute('checked');\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * The `th:classappend` is a special attribute that applies the expression to\n * any existing classes already on an element.\n * \n * @author Emanuel Rabina\n */\nexport default class ClassAppendAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'classappend';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, ClassAppendAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:classappend` or `data-th-classappend`\n\t * attribute on it, adding the resulting classes to any existing classes on\n\t * the current element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet classes = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (classes) {\n\t\t\telement.className += ` ${classes}`;\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:each` attribute processor, iterates over an\n * [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols),\n * executing a piece of template for every iteration.\n * \n * @author Emanuel Rabina\n */\nexport default class EachAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'each';\n\n\t/**\n\t * Constructor, set this processor to use the `each` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, EachAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:each`/`data-th-each` attribute,\n\t * repeating the markup for every object in the iterable value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tlet iterationInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (iterationInfo) {\n\t\t\tlet {localValueName, iterable} = iterationInfo;\n\t\t\tlet templateNode = element.cloneNode(true);\n\n\t\t\tfor (let value of iterable) {\n\t\t\t\tlet localClone = templateNode.cloneNode(true);\n\t\t\t\tlocalClone.__thymeleafLocalVariables = {\n\t\t\t\t\t[localValueName]: value\n\t\t\t\t};\n\t\t\t\telement.parentElement.appendChild(localClone);\n\t\t\t}\n\t\t}\n\t\telement.parentElement.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or empties an attribute value on\n * an element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class EmptyableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.setAttribute(this.name, value ? value.toString() : '');\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const EMPTYABLE_ATTRIBUTE_NAMES = [\n\t'datetime',\n\t'href',\n\t'src',\n\t'style',\n\t'value'\n];\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:fragment` attribute processor, marks an\n * element as a template fragment that can be imported by other processors like\n * `th:insert`.\n * \n * @author Emanuel Rabina\n */\nexport default class FragmentAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'fragment';\n\n\t/**\n\t * Constructor, set this processor to use the `fragment` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, FragmentAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:fragment` or `data-th-fragment`\n\t * attribute on it.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Add an event listener to `element` that only fires when the target of the\n * event matches `selector`.\n * \n * @param {Element} element\n * @param {String} eventName\n * @param {String} selector\n * @param {Function} handler\n */\nexport function addEventDelegate(element, eventName, selector, handler) {\n  element.addEventListener(eventName, function (event) {\n    if (event.target.matches(selector)) {\n      handler(event);\n    }\n  });\n}\n/**\n * Removes all of an element's child nodes.\n * \n * @param {Element} element\n */\n\nexport function clearChildren(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n/**\n * Deserialize an HTML string into a document fragment.\n * \n * @param {String} htmlString\n * @return {DocumentFragment}\n */\n\nexport function deserialize(htmlString) {\n  return document.createRange().createContextualFragment(htmlString);\n}\n/**\n * Serialize a document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {String}\n */\n\nexport function serialize(documentFragment) {\n  return new XMLSerializer().serializeToString(documentFragment);\n}\n\n//# sourceMappingURL=dom-utils.es.js.map","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:if` attribute processor, includes or\n * excludes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n * \n * @author Emanuel Rabina\n */\nexport default class IfAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'if';\n\n\t/**\n\t * Constructor, set this processor to use the `if` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, IfAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:if` or `data-th-if` attribute\n\t * on it, evaluating the expression for truthy/falsey, rendering/excluding the\n\t * element and its children based on the result.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} `true` if the element was removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet expressionResult = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (!expressionResult) {\n\t\t\tclearChildren(element);\n\t\t\telement.parentNode.removeChild(element);\n\t\t\treturn true;\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}                       from './AllInput.js';\nimport ThymeleafRule                    from './ThymeleafRule.js';\nimport {Optional, Sequence, ZeroOrMore} from '../../parser/Operators.js';\nimport Grammar                          from '../../parser/Grammar.js';\n\nimport {flatten} from '@ultraq/array-utils';\n\n/**\n * Grammar for Thymeleaf fragment signatures.  This is separate from the\n * expression language as these are not expressions, but rather marker syntaxes.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf fragment signature',\n\n\tnew ThymeleafRule('ThymeleafFragmentSignatureRule',\n\t\tAllInput('FragmentSignature')\n\t),\n\n\t/**\n\t * The target end of a fragment expression, contains the fragment name and\n\t * optional parameter names.\n\t */\n\tnew ThymeleafRule('FragmentSignature',\n\t\tSequence('FragmentName', Optional('FragmentParameters')),\n\t\t([fragmentName, parameterNames]) => context => {\n\t\t\treturn {\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameterNames: parameterNames ? parameterNames(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence(/\\(/, ZeroOrMore('FragmentParameterNames'), /\\)/),\n\t\t([, [parameterNames]]) => context => {\n\t\t\treturn parameterNames(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameterNames',\n\t\tSequence('Identifier', ZeroOrMore(Sequence(/,/, 'Identifier'))),\n\t\t(namesAndSeparators) => context => {\n\t\t\treturn namesAndSeparators ?\n\t\t\t\tflatten(namesAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(name => name(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/)\n);\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global ENVIRONMENT */\n\n/**\n * Sets a Thymeleaf attribute and value on an existing element.  Used primarily\n * in tests.\n * \n * @param {Element} element\n * @param {String} attribute\n * @param {String} value\n * @return {Element} The same element but with the attribute and value set on it.\n */\nexport function createThymeleafAttributeValue(element, attribute, value) {\n\telement.setAttribute(attribute, value);\n\treturn element;\n}\n\n/**\n * Returns the value of a Thymeleaf attribute processor.\n * \n * @param {Element} element\n * @param {String} prefix\n * @param {String} processorName\n * @return {String} The value of the Thymeleaf attribute processor, or `null`\n *   if the attribute processor wasn't present.\n */\nexport function getThymeleafAttributeValue(element, prefix, processorName) {\n\treturn element.getAttribute(`${prefix}:${processorName}`) ||\n\t       element.getAttribute(`data-${prefix}-${processorName}`);\n}\n\n/**\n * Use either JSDOM or the browser's native DOM parsing to deserialize the HTML\n * string into a document fragment.\n * \n * @param {String} htmlString\n * @return {DocumentFragment}\n */\nexport function deserialize(htmlString) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\trequire('@ultraq/dom-utils').deserialize(htmlString) :\n\t\trequire('jsdom').jsdom(htmlString, {\n\t\t\tfeatures: {\n\t\t\t\tFetchExternalResources: false,\n\t\t\t\tProcessExternalResources: false\n\t\t\t}\n\t\t});\n}\n\n/**\n * Use either JSDOM or the browser's native DOM serialization to serialize a\n * document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {String}\n */\nexport function serialize(documentFragment) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\trequire('@ultraq/dom-utils').serialize(documentFragment) :\n\t\trequire('jsdom').serializeDocument(documentFragment);\n}\n","/* \n * Copyright 2015, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(function(root, factory) {\n\t'use strict';\n\n\t// AMD\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('dumb-query-selector', [], factory);\n\t}\n\t// CommonJS\n\telse if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t}\n\t// Global\n\telse {\n\t\tvar dumbQuerySelector = factory();\n\t\tObject.keys(dumbQuerySelector).forEach(function(key) {\n\t\t\troot[key] = dumbQuerySelector[key];\n\t\t});\n\t}\n})(this, function() {\n\t'use strict';\n\n\treturn {\n\n\t\t/**\n\t\t * An element selector and shortcut for `(document/element).querySelector`.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Element} The matching element, or `null` if no match is found.\n\t\t */\n\t\t$: function(query, scope) {\n\t\t\treturn (scope || document).querySelector(query);\n\t\t},\n\n\t\t/**\n\t\t * An element list selector, returning an array of elements because\n\t\t * `NodeList`s are dumb.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Array} The list of matching elements.\n\t\t */\n\t\t$$: function(query, scope) {\n\t\t\treturn Array.prototype.slice.call((scope || document).querySelectorAll(query));\n\t\t}\n\t};\n});\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {deserialize}              from './Dom.js';\nimport FragmentAttributeProcessor from '../standard/processors/FragmentAttributeProcessor.js';\nimport StandardDialect            from '../standard/StandardDialect.js';\n\nimport {$} from 'dumb-query-selector';\n\n/**\n * Extract HTML from the target identified by the given fragment information.\n * \n * @param {String} fragmentInfo\n * @param {Object} context\n * @return {Promise<Element>}\n */\nexport async function extractFragment(fragmentInfo, context) {\n\n\tlet {templateResolver} = context;\n\tif (templateResolver) {\n\t\tlet {templateName, fragmentName} = fragmentInfo;\n\t\tlet template = deserialize(await templateResolver(templateName));\n\n\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\tlet dialectPrefix = standardDialect.prefix;\n\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\treturn $(`[${dialectPrefix}\\\\:${fragmentProcessorName}^=\"${fragmentName}\"]`, template) ||\n\t\t\t\t\t $(`[data-${dialectPrefix}-${fragmentProcessorName}^=\"${fragmentName}\"]`, template);\n\t}\n\n\tconsole.log('No template resolver configured');\n\treturn null;\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FragmentAttributeProcessor   from './FragmentAttributeProcessor.js';\nimport StandardDialect              from '../StandardDialect.js';\nimport ExpressionProcessor          from '../expressions/ExpressionProcessor.js';\nimport FragmentSignatureGrammar     from '../expressions/FragmentSignatureGrammar.js';\nimport AttributeProcessor           from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue} from '../../utilities/Dom.js';\nimport {extractFragment}            from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:insert` attribute processor, inserts the\n * referenced template fragment as a child of the current element.\n * \n * @author Emanuel Rabina\n */\nexport default class InsertAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'insert';\n\n\t/**\n\t * Constructor, set this processor to use the `insert` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, InsertAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:insert`/`data-th-insert` attribute,\n\t * replacing the current element's children with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Promise<Boolean>} Whether or not the parent element needs to do a\n\t *   second pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(fragmentInfo, context);\n\t\t\tif (fragment) {\n\t\t\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\t\t\tlet dialectPrefix = standardDialect.prefix;\n\t\t\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, dialectPrefix, fragmentProcessorName);\n\t\t\t\tlet {parameterNames} = new ExpressionProcessor(FragmentSignatureGrammar).process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\n\t\t\t\telement.appendChild(fragment);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or removes an attribute on an\n * element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class RemovableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (value) {\n\t\t\telement.setAttribute(this.name, value.toString());\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute(this.name);\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const REMOVABLE_ATTRIBUTE_NAMES = [\n\t'alt',\n\t'class'\n];\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * `th:remove`, used to remove the current element or select parts of it (and\n * its children).\n * \n * @author Emanuel Rabina\n */\nexport default class RemoveAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'remove';\n\n\t/**\n\t * Constructor, set this processor to use the `remove` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, RemoveAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:remove`/`data-th-remove`\n\t * attribute, removing the current element or parts of it based on the\n\t * attribute value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} Whether reprocessing behaviour needs to be applied, only\n\t *   when the current tag has been removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tswitch (attributeValue) {\n\t\t\tcase 'all':\n\t\t\t\telement.parentElement.removeChild(element);\n\t\t\t\treturn true;\n\t\t\tcase 'all-but-first':\n\t\t\t\twhile (element.lastElementChild !== element.firstElementChild) {\n\t\t\t\t\telement.removeChild(element.lastElementChild);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n","/*\n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FragmentAttributeProcessor   from './FragmentAttributeProcessor.js';\nimport StandardDialect              from '../StandardDialect.js';\nimport ExpressionProcessor          from '../expressions/ExpressionProcessor.js';\nimport FragmentSignatureGrammar     from '../expressions/FragmentSignatureGrammar.js';\nimport AttributeProcessor           from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue} from '../../utilities/Dom.js';\nimport {extractFragment}            from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:relace` attribute processor, replaces the\n * current element with the fragment referenced by the processor.\n * \n * @author Emanuel Rabina\n */\nexport default class ReplaceAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'replace';\n\n\t/**\n\t * Constructor, set this processor to use the `replace` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, ReplaceAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:replace`/`data-th-replace`\n\t * attribute, replacing the current element with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Promise<Boolean>} Whether or not the parent element needs to do a\n\t *   second pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = new ExpressionProcessor().process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(fragmentInfo, context);\n\t\t\tif (fragment) {\n\n\t\t\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\t\t\tlet dialectPrefix = standardDialect.prefix;\n\t\t\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, dialectPrefix, fragmentProcessorName);\n\t\t\t\tlet {parameterNames} = new ExpressionProcessor(FragmentSignatureGrammar).process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\n\t\t\t\t// TODO: Can simplify this with insertAdjacent*(), but need to upgrade\n\t\t\t\t//       JSDOM first.\n\t\t\t\telement.parentElement.insertBefore(fragment, element);\n\t\t\t\telement.remove();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\telement.remove();\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:text` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed, escaping any unsafe input.\n * \n * @author Emanuel Rabina\n */\nexport default class TextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'text';\n\n\t/**\n\t * Constructor, set this processor to use the `text` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, TextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:text` or `data-th-text` attribute\n\t * on it, taking the text expression in the value and applying it to the text\n\t * content of the element.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.textContent = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/*\n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:unless` attribute processor, excludes or\n * includes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n *\n * @author Robbie Bardijn\n */\nexport default class UnlessAttributeProcessor extends AttributeProcessor {\n\n  static NAME = 'unless';\n\n  /**\n   * Constructor, set this processor to use the `unless` name and supplied prefix.\n   *\n   * @param {String} prefix\n   */\n  constructor(prefix) {\n\n    super(prefix, UnlessAttributeProcessor.NAME);\n  }\n\n  /**\n   * Processes an element that contains a `th:unless` or `data-th-unless` attribute\n   * on it, evaluating the expression for falsey/truthy, excluding/rendering the\n   * element and its children based on the result.\n   *\n   * @param {Element} element\n   *   Element being processed.\n   * @param {String} attribute\n   *   The attribute that was encountered to invoke this processor.\n   * @param {String} attributeValue\n   *   The value given by the attribute.\n   * @param {Object} context\n   */\n  process(element, attribute, attributeValue, context) {\n\n    let expressionResult = new ExpressionProcessor().process(attributeValue, context);\n    if (expressionResult) {\n      clearChildren(element);\n      element.parentNode.removeChild(element);\n    }\n    element.removeAttribute(attribute);\n  }\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * JS equivalent of Thymeleaf's `th:utext` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed.\n * \n * @author Emanuel Rabina\n */\nexport default class UTextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'utext';\n\n\t/**\n\t * Constructor, set this processor to use the `utext` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, UTextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:utext` or `data-th-utext`\n\t * attribute on it, taking the text expression in the value and applying it to\n\t * the text content of the element.\n\t *\n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.innerHTML = new ExpressionProcessor().process(attributeValue, context);\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor.js';\nimport AttributeProcessor  from '../../processors/AttributeProcessor.js';\n\n/**\n * `th:with`, used for creating scoped variables, useful for aliasing things.\n * \n * @author Emanuel Rabina\n */\nexport default class WithAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'with';\n\n\t/**\n\t * Constructor, set this processor to use the `with` name and supplied\n\t * prefix.\n\t *\n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, WithAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:with`/`data-th-with` attribute,\n\t * setting a variable scoped to the current element with the given name.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} `true` as adding new local variables needs to re-run\n\t *   processing.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tlet localVariables = {};\n\t\tlet aliases = new ExpressionProcessor().process(attributeValue, context);\n\t\taliases.forEach(({name, value}) => {\n\t\t\tlocalVariables[name] = value;\n\t\t});\n\t\telement.__thymeleafLocalVariables = localVariables;\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for dialects.\n * \n * @author Emanuel Rabina\n */\nexport default class Dialect {\n\n\t/**\n\t * Constructor, sets this dialect's name and optional prefix.\n\t * \n\t * @param {String} name\n\t * @param {String} [prefix]\n\t */\n\tconstructor(name, prefix) {\n\n\t\tthis.name   = name;\n\t\tthis.prefix = prefix;\n\t}\n\n\t/**\n\t * Return an object whose keys are the expression object names, the values the\n\t * expression object available properties and methods.\n\t * \n\t * @return {Object}\n\t */\n\tget expressionObjects() {\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return an array of processors.\n\t * \n\t * @return {Array}\n\t */\n\tget processors() {\n\n\t\treturn null;\n\t}\n}\n","/*\n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttrAttributeProcessor        from './processors/AttrAttributeProcessor.js';\nimport BlockElementProcessor         from './processors/BlockElementProcessor.js';\nimport CheckedAttributeProcessor     from './processors/CheckedAttributeProcessor.js';\nimport ClassAppendAttributeProcessor from './processors/ClassAppendAttributeProcessor.js';\nimport EachAttributeProcessor        from './processors/EachAttributeProcessor.js';\nimport EmptyableAttributeProcessor, {\n\tEMPTYABLE_ATTRIBUTE_NAMES\n}                                    from './processors/EmptyableAttributeProcessor.js';\nimport FragmentAttributeProcessor    from './processors/FragmentAttributeProcessor.js';\nimport IfAttributeProcessor          from './processors/IfAttributeProcessor.js';\nimport InsertAttributeProcessor      from './processors/InsertAttributeProcessor.js';\nimport RemovableAttributeProcessor, {\n\tREMOVABLE_ATTRIBUTE_NAMES\n}                                    from './processors/RemovableAttributeProcessor.js';\nimport RemoveAttributeProcessor      from './processors/RemoveAttributeProcessor.js';\nimport ReplaceAttributeProcessor     from './processors/ReplaceAttributeProcessor.js';\nimport TextAttributeProcessor        from './processors/TextAttributeProcessor.js';\nimport UnlessAttributeProcessor      from './processors/UnlessAttributeProcessor.js';\nimport UTextAttributeProcessor       from './processors/UTextAttributeProcessor.js';\nimport WithAttributeProcessor        from './processors/WithAttributeProcessor.js';\nimport Dialect                       from '../dialects/Dialect.js';\n\n/**\n * The out-of-the-box dialect for Thymeleaf, the \"Standard Dialect\".\n * \n * @author Emanuel Rabina\n */\nexport default class StandardDialect extends Dialect {\n\n\tstatic NAME           = 'Standard';\n\tstatic DEFAULT_PREFIX = 'thjs';\n\n\t/**\n\t * Create an instance of this dialect with the name \"Standard\" and\n\t * given prefix, defaulting to \"th\" if not supplied.\n\t * \n\t * @param {String} [prefix='thjs']\n\t */\n\tconstructor(prefix = StandardDialect.DEFAULT_PREFIX) {\n\n\t\tsuper(StandardDialect.NAME, prefix);\n\t}\n\n\t/**\n\t * Returns the supported standard processors.\n\t * \n\t * @return {Array} A list of the processors included in this dialect.\n\t */\n\tget processors() {\n\n\t\t// TODO: This is a very basic way of imposing the order of attribute\n\t\t//       processors.  It's currently ordered in the same way as OG\n\t\t//       Thymeleaf.  Figure out a 'proper' way to do the ordering.\n\n\t\t// Order taken from https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\n\t\tlet {prefix} = this;\n\t\treturn [\n\t\t\t// Fragment inclusion\n\t\t\tnew InsertAttributeProcessor(prefix),\n\t\t\tnew ReplaceAttributeProcessor(prefix),\n\n\t\t\t// Fragment iteration\n\t\t\tnew EachAttributeProcessor(prefix),\n\n\t\t\t// Conditional evaluation\n\t\t\tnew IfAttributeProcessor(prefix),\n\t\t\tnew UnlessAttributeProcessor(prefix),\n\n\t\t\t// Local variable definition\n\t\t\tnew WithAttributeProcessor(prefix),\n\n\t\t\t// General attribute modification\n\t\t\tnew AttrAttributeProcessor(prefix),\n\t\t\tnew ClassAppendAttributeProcessor(prefix),\n\t\t\t...EMPTYABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new EmptyableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\t\t\t...REMOVABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new RemovableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\n\t\t\t// Specific attribute modification\n\t\t\tnew CheckedAttributeProcessor(prefix),\n\n\t\t\t// Text\n\t\t\tnew TextAttributeProcessor(prefix),\n\t\t\tnew UTextAttributeProcessor(prefix),\n\n\t\t\t// Fragment specification\n\t\t\tnew FragmentAttributeProcessor(prefix),\n\n\t\t\t// Fragment removal\n\t\t\tnew RemoveAttributeProcessor(prefix),\n\n\t\t\t// Element processors\n\t\t\tnew BlockElementProcessor(prefix)\n\t\t];\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StandardDialect from './standard/StandardDialect';\n\n/**\n * Configuration object for the template engine.\n * \n * @typedef {Object} Configuration\n * @property {Array<Dialect>} dialects\n *   A list of dialects to include with this instance of the template engine.\n * @property {Object} [isomorphic]\n *   An object which configures the isomorphic capabilities of the template\n *   engine.\n * @property {Function} templateResolver\n *   A function for returning the text of templates named by fragment\n *   expressions in templates.  Is given only 1 argument, the template name from\n *   a fragment expression, and should return a Promise of the template text.\n */\n\n/**\n * Default configuration for the template engine, configures the standard\n * dialect with no options (uses `thjs` as the prefix).\n * \n * @type {Configuration}\n */\nexport const DEFAULT_CONFIGURATION = {\n\tdialects: [\n\t\tnew StandardDialect()\n\t]\n};\n\n/**\n * Standard configuration, configures the standard dialect with the `th` prefix\n * and enables isomorphic mode which enables the ability to use much of the same\n * processors across original Thymeleaf and ThymeleafJS.\n * \n * @type {Configuration}\n */\nexport const STANDARD_CONFIGURATION = {\n\t...DEFAULT_CONFIGURATION,\n\tdialects: [\n\t\tnew StandardDialect('th')\n\t],\n\tisomorphic: {\n\t\tprefix: 'thjs'\n\t}\n};\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from './AttributeProcessor.js';\nimport ElementProcessor   from './ElementProcessor.js';\n\n/**\n * Class for determining if an element contains a processor on it.\n */\nexport default class Matcher {\n\n\t/**\n\t * Create a matcher to work with the current context and isomorphic processing\n\t * settings.\n\t * \n\t * @param {Object} context\n\t * @param {Object} isomorphic\n\t */\n\tconstructor(context, isomorphic) {\n\n\t\tthis.context    = context;\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Return the matching attribute or element that a processor can work over.\n\t * \n\t * @param {Element} element\n\t * @param {AttributeProcessor} processor\n\t * @return {String}\n\t *   The attribute or element that matched processing by this processor, or\n\t *   `null` if no match was found.\n\t */\n\tmatches(element, processor) {\n\n\t\tlet {name} = processor;\n\n\t\t// TODO: Some way to do this generically and not have to type check?\n\n\t\t// Attribute processor matching, can be of the name prefix:name or data-prefix-name\n\t\tif (processor instanceof AttributeProcessor) {\n\t\t\tlet prefixes = [].concat(\n\t\t\t\tthis.isomorphic ? this.isomorphic.prefix : [],\n\t\t\t\tprocessor.prefix\n\t\t\t);\n\t\t\tfor (let prefix of prefixes) {\n\t\t\t\tlet attribute;\n\t\t\t\tattribute = `${prefix}:${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t\tattribute = `data-${prefix}-${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Element processor, can only be of the name prefix:name\n\t\telse if (processor instanceof ElementProcessor) {\n\t\t\tlet elementName = `${processor.prefix}:${name}`;\n\t\t\tif (element.tagName === elementName.toUpperCase()) {\n\t\t\t\treturn elementName;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DEFAULT_CONFIGURATION}  from './Configurations.js';\nimport AttributeProcessor       from './processors/AttributeProcessor.js';\nimport ElementProcessor         from './processors/ElementProcessor.js';\nimport Matcher                  from './processors/Matcher.js';\nimport StandardDialect          from './standard/StandardDialect.js';\nimport {promisify}              from './utilities/Functions.js';\nimport {deserialize, serialize} from './utilities/Dom.js';\n\nconst XML_NAMESPACE_ATTRIBUTE = `xmlns:${StandardDialect.DEFAULT_PREFIX}`;\n\n/**\n * A highly-configurable class responsible for processing the Thymeleaf\n * directives found in HTML documents and fragments.\n * \n * @author Emanuel Rabina\n */\nexport default class TemplateEngine {\n\n\t/**\n\t * Constructor, set up a new template engine instance.\n\t * \n\t * @param {Object} config\n\t */\n\tconstructor({dialects, isomorphic, templateResolver} = DEFAULT_CONFIGURATION) {\n\n\t\tthis.dialects = dialects;\n\t\tthis.isomorphic = isomorphic;\n\t\tthis.templateResolver = templateResolver;\n\n\t\t// Combine all processors into a unified list\n\t\tthis.processors = dialects.reduce((acc, {processors}) => processors ? [\n\t\t\t...acc,\n\t\t\t...processors\n\t\t] : acc, []);\n\n\t\t// Combine all expression objects into a unified object\n\t\tthis.expressionObjects = dialects.reduce((acc, {expressionObjects}) => expressionObjects ? {\n\t\t\t...acc,\n\t\t\t...expressionObjects\n\t\t} : acc, {});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template data, returning the processed template.\n\t *\n\t * @param {String} template\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocess(template, context = {}) {\n\n\t\tlet document = deserialize(template);\n\t\tlet rootElement = document.firstElementChild;\n\t\treturn this.processNode(rootElement, {\n\t\t\t...context,\n\t\t\t...this.expressionObjects,\n\t\t\tdialects:         this.dialects,\n\t\t\ttemplateResolver: this.templateResolver\n\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// TODO: Special case, remove the xmlns:th namespace from the document.\n\t\t\t\t//       This should be handled like in main Thymeleaf where it's just\n\t\t\t\t//       another processor that runs on the document.\n\t\t\t\tif (rootElement.hasAttribute(XML_NAMESPACE_ATTRIBUTE)) {\n\t\t\t\t\trootElement.removeAttribute(XML_NAMESPACE_ATTRIBUTE);\n\t\t\t\t}\n\t\t\t\treturn serialize(document);\n\t\t\t});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template at the given path, returning a promise of the\n\t * processed template.\n\t * \n\t * @param {String} filePath\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocessFile(filePath, context = {}) {\n\n\t\t/* global ENVIRONMENT */\n\t\treturn ENVIRONMENT === 'browser' ?\n\t\t\tPromise.reject(new Error('Cannot use fs.readFile inside a browser')) :\n\t\t\tpromisify(require('fs').readFile)(filePath)\n\t\t\t\t.then(data => {\n\t\t\t\t\treturn this.process(data, context);\n\t\t\t\t});\n\t}\n\n\t/**\n\t * Process a DOM element.\n\t * \n\t * @private\n\t * @param {Element} element\n\t * @param {Object} [context={}]\n\t * @return {Promise<Boolean>} Whether or not the parent node needs\n\t *   reprocessing.\n\t */\n\tasync processNode(element, context = {}) {\n\n\t\tlet localVariables = element.__thymeleafLocalVariables || {};\n\t\tlet localContext = {\n\t\t\t...context,\n\t\t\t...localVariables\n\t\t};\n\t\tlet matcher = new Matcher(localContext, this.isomorphic);\n\n\t\t// Run the current element through the gamut of registered processors.  If\n\t\t// one of them sends a reprocessing signal, return from this method to let\n\t\t// the caller re-run everything.\n\t\tfor (let i = 0; i < this.processors.length; i++) {\n\t\t\tlet processor = this.processors[i];\n\t\t\tlet processorResult = false;\n\n\t\t\t// TODO: Some way to do this generically and not have to type check?\n\t\t\tlet attributeOrElementName = matcher.matches(element, processor);\n\t\t\tif (attributeOrElementName) {\n\t\t\t\tif (processor instanceof AttributeProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, attributeOrElementName,\n\t\t\t\t\t\telement.getAttribute(attributeOrElementName), localContext);\n\t\t\t\t}\n\t\t\t\telse if (processor instanceof ElementProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, localContext);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (processorResult) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Process this element's children, handling the reprocessing signal to\n\t\t// re-run the 'current' child element (could have been shifted due to being\n\t\t// removed etc).\n\t\tfor (let i = 0; i < element.children.length; ) {\n\t\t\tlet child = element.children[i];\n\t\t\tlet reprocess = await this.processNode(child, localContext);\n\t\t\tif (!reprocess) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["AllInput","ruleName","input","parser","matchResult","parseWithExpression","exhausted","defaultMatchProcessor","result","Rule","constructor","name","expression","matchProcessor","accept","this","trackExpression","ThymeleafRule","args","apply","Grammar","startingRule","additionalRules","rules","concat","findRuleByName","rule","find","Error","Optional","markAndClearOrReset","OrderedChoice","expressions","Sequence","results","push","ZeroOrMore","InputBuffer","clear","undefined","positionStack","pop","position","length","mark","func","reset","read","pattern","remaining","substring","leadingWhitespace","match","RegExp","source","exec","value","startsWith","newPosition","flatten","array","reduce","accumulator","Array","isArray","remove","predicate","item","index","splice","chain","context","negation","filter","link","linkContext","nextLink","matchers","parseResults","i","parseResult","RegularExpression","urlFunc","parameters","url","expressionProcessor","ExpressionProcessor","paramsList","slice","split","map","param","lhs","rhs","process","urlTemplate","head","placeholder","tail","paramEntry","key","join","templateName","fragmentName","type","expressionsAndSeparators","localValueName","iterationStatusVariable","collectionExpressionAction","iterable","OneOrMore","values","aliases","alias","replace","parseFloat","leftOperand","comparator","rightOperand","condition","truthyExpression","falseyExpression","propertyName","property","hasOwnProperty","parameterContext","methodName","method","console","warn","parametersAndSeparators","parameter","Parser","grammar","parse","inputBuffer","errorMessage","env","NODE_ENV","error","stackSize","expressionStack","toString","ThymeleafExpressionLanguage","AttributeProcessor","prefix","AttrAttributeProcessor","NAME","element","attribute","attributeValue","test","forEach","attributeParts","setAttribute","string","escapeHtml","removeAttribute","ElementProcessor","BlockElementProcessor","parent","parentElement","firstChild","child","insertBefore","Element","__thymeleafLocalVariables","removeChild","CheckedAttributeProcessor","ClassAppendAttributeProcessor","classes","className","EachAttributeProcessor","iterationInfo","templateNode","cloneNode","localClone","appendChild","EmptyableAttributeProcessor","EMPTYABLE_ATTRIBUTE_NAMES","FragmentAttributeProcessor","clearChildren","IfAttributeProcessor","parentNode","parameterNames","namesAndSeparators","getThymeleafAttributeValue","processorName","getAttribute","deserialize","htmlString","require","root","factory","module","exports","dumbQuerySelector","Object","keys","$","query","scope","document","querySelector","$$","prototype","call","querySelectorAll","async","extractFragment","fragmentInfo","templateResolver","template","dialectPrefix","dialects","dialect","StandardDialect","fragmentProcessorName","log","InsertAttributeProcessor","fragment","fragmentSignature","FragmentSignatureGrammar","localContext","parameterName","RemovableAttributeProcessor","REMOVABLE_ATTRIBUTE_NAMES","RemoveAttributeProcessor","lastElementChild","firstElementChild","ReplaceAttributeProcessor","TextAttributeProcessor","textContent","UnlessAttributeProcessor","UTextAttributeProcessor","innerHTML","WithAttributeProcessor","localVariables","Dialect","DEFAULT_PREFIX","attributeName","DEFAULT_CONFIGURATION","STANDARD_CONFIGURATION","isomorphic","Matcher","matches","processor","prefixes","hasAttribute","elementName","tagName","toUpperCase","XML_NAMESPACE_ATTRIBUTE","processors","acc","expressionObjects","rootElement","processNode","then","documentFragment","serialize","processFile","filePath","Promise","reject","matcher","processorResult","attributeOrElementName","children"],"mappings":"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"}